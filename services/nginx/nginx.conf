daemon off;

#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        run/nginx.pid;

events {
    worker_connections  1024;
}

http {

    # If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
    # scheme used to connect to this server
 #   map $http_x_forwarded_proto $proxy_x_forwarded_proto {
#      default $http_x_forwarded_proto;
#      ''      $scheme;
#    }

    # If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
    # server port the client connected to
 #   map $http_x_forwarded_port $proxy_x_forwarded_port {
#      default $http_x_forwarded_port;
#      ''      $server_port;
#    }

    # If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
    # Connection header that may have been passed to this server
#    map $http_upgrade $proxy_connection {
#      default upgrade;
#      '' close;
#    }

#    gzip_types text/plain text/css application/javascript application/json
#    application/x-javascript text/xml application/xml application/xml+rss
#    text/javascript;
#    log_format vhost '$host $remote_addr - $remote_user [$time_local] '
#                     '"$request" $status $body_bytes_sent '
#                     '"$http_referer" "$http_user_agent"';


    # HTTP 1.1 support
    proxy_http_version 1.1;
    proxy_buffering off;
    proxy_set_header Host $http_host;
#    proxy_set_header Upgrade $http_upgrade;
#    proxy_set_header Connection $proxy_connection;
#    proxy_set_header X-Real-IP $remote_addr;
#    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#    proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
#    proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;
    # Mitigate httpoxy attack (see README for details)
#    proxy_set_header Proxy "";

    include       /etc/nginx/conf.d/*.conf;
    server_names_hash_bucket_size 128;
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    proxy_connect_timeout       1200;
    proxy_send_timeout          1200;
    proxy_read_timeout          1200;
    send_timeout                1200;
    client_max_body_size        999M;

    server {
        server_name _;
        listen 80;

        auth_basic "Restricted Content";
        auth_basic_user_file /etc/nginx/.htpasswd;

#            location ~* ^/(portainer) {
#                rewrite ^/portainer / break;
#                proxy_pass http://portainer:9000;
#            }
#            location ~* ^/(portainer/.*) {
#                rewrite ^/portainer/(.*) $1 break;
#                proxy_pass http://portainer;
#            }

        # Kerberos web interface
        location ~* ^/(kerberos) {
            rewrite ^/kerberos / break;
            proxy_pass http://kerberos;
        }
        # Kerberos web interface
        location ~* ^/(kerberos/.*) {
            rewrite ^/kerberos/(.*) $1 break;
            proxy_pass http://kerberos;
        }
        # Kerberos web interface
        location ~* ^/(welcome|login|images|system|settings|api/v1/images/|capture/) {
            proxy_pass http://kerberos;
        }

        # Kerberos video stream
        location /video {
            proxy_pass http://kerberos:8889;
        }

        # Configurator service
        location /configurator {
            proxy_pass http://configurator/;
        }

        # Historian service
        location /historian {
            proxy_pass http://historian/;
        }

        # Swarm Watcher service
        location /swarmwatcher {
            proxy_pass http://swarm-watcher/;
        }

        location / {

#                if ($http_referer ~ ^(.*(portainer|css/app).*) ) {
#                        proxy_pass http://portainer:9000;
#                }

            # Kerberos web interface
            if ($http_referer ~* (kerberos|font-awesome.min.css) ) {
                    proxy_pass http://kerberos;
            }
            # Kerberos web interface
            if ($http_referer ~* ^https?://[^/]+/(welcome|login|images|system|settings|js/vendor) ) {
                    proxy_pass http://kerberos;
            }

            # default catch-all redirection
            proxy_pass http://configurator/;

        }


    }

}

